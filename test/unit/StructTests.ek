import <io>
import <test>

// Definition of a structure. Should be stored in the scope so we can lookup for
// this type of struct.
struct SomeStruct
{
    int i;
    float f;
    string s;
};

struct SomeStruct first;
TEST(first.i == 0, "struct init");

// Setters.
first.i = 1;
TEST(first.i == 1, "set struct int");

first.f = 1.1;
TEST(first.f == 1.1, "set struct float");

first.s = "hello, world!";
TEST(first.s == "hello, world!", "set struct string");

// Getters (assigning value).
int iValue = first.i;

++iValue;
TEST(iValue == 2 && first.i == 1, "int getter");

// Copy struct instances.
struct SomeStruct second;   // TODO: - cannot handle = first here!
second = first;
TEST(second.i == 1 && second.f == 1.1 && second.s == "hello, world!", "struct assignment");
// TODO: - After getting this working properly, next step will be to implement classes 
// which we will derive from Structs. Will be pretty much the same. Also need to
// have a mapping for storing function objects which will be called in the same 
// way as above and have access to all objects we have created in this Struct. 
// Interestingly, we could also create a Scope object which lives inside Struct 
// and handles memory and ownership. This would make sense and we would not need 
// an explicit map inside!! 